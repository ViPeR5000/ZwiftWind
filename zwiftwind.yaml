esphome:
  name: zwiftwind
  platform: ESP32
  board: nodemcu-32s

wifi:
  ssid: !secret wifi_name
  password: !secret wifi_password

  ap:
    ssid: "ZwiftWind Fallback Hotspot"
    password: !secret fallback_password

captive_portal:

logger:

api:
  password: !secret api_password

time:
  - platform: homeassistant
    id: homeassistant_time

ota:
  - platform: esphome 
    password: !secret ota_password
  
globals:
  - id: speed_goal
    type: int
    initial_value: '0'
  - id: speed_step_size
    type: int
    initial_value: '1'
  - id: speed_delay
    type: int
    initial_value: '50'
  
number:
  - platform: template
    name: "ZwiftWind PWM Freq"
    id: pwm_freq
    initial_value: 24000
    unit_of_measurement: "Hz"
    entity_category: config
    optimistic: true
    min_value: 1
    max_value: 30000
    step: 1
    restore_value: no
    on_value:
      output.ledc.set_frequency:
        id: pwm_output
        frequency: !lambda "return x;"
          
  - platform: template
    name: "ZwiftWind Max Fan speed"
    entity_category: config
    id: max_fan_speed
    initial_value: 100
    unit_of_measurement: "%"
    optimistic: true
    min_value: 1
    max_value: 100
    step: 1
    restore_value: yes
    set_action:
      lambda: |-
        ESP_LOGD("max_fan_speed","Setting set_action to = %d", int(x));
        if (int(x) <= id(min_fan_speed).state){
          auto call = id(min_fan_speed).make_call();
          call.set_value(int(x)-1);
          call.perform();
        }
  
  - platform: template
    name: "ZwiftWind Min Fan speed"
    entity_category: config
    id: min_fan_speed
    initial_value: 10
    unit_of_measurement: "%"
    optimistic: true
    min_value: 1
    max_value: 100
    step: 1
    restore_value: yes
    set_action:
      lambda: |-
        ESP_LOGD("min_fan_speed","Setting set_action to = %d", int(x));
        if (int(x) >= id(max_fan_speed).state){
          auto call = id(max_fan_speed).make_call();
          call.set_value(int(x)+1);
          call.perform();
        }

# Similar optimization is applied for other number templates for HR, Speed, and Power Fan min/max settings

select:
  - platform: template
    name: "ZwiftWind Mode"
    id: mode
    entity_category: config
    optimistic: true
    options:
      - HR
      - Speed
      - Power
      - Manual
    initial_option: Manual
    
script:
  - id: speed_stepping
    mode: queued
    then:
      if:
        condition:
          lambda: |-
            return id(the_fan).speed != id(speed_goal);
        then:
          - fan.turn_on:
              id: the_fan
              speed: !lambda |-
                return id(the_fan).speed < id(speed_goal) 
                  ? id(the_fan).speed + id(speed_step_size) 
                  : id(the_fan).speed - id(speed_step_size);
          - delay: !lambda "return id(speed_delay);"
          - script.execute: speed_stepping
        else:
          - sensor.template.publish:
              id: sens_fanspeed
              state: !lambda 'return id(speed_goal);'
          - script.stop: speed_stepping

  # Similar optimizations for fan_adjust_hr, fan_adjust_speed, and fan_adjust_power scripts

sensor:
  - platform: wifi_signal
    name: ZwiftWind WiFi Signal
    entity_category: diagnostic
    update_interval: 60s
    
  - platform: template
    name: ZwiftWind Fanspeed
    id: sens_fanspeed
    entity_category: diagnostic
    unit_of_measurement: "%"
    icon: "mdi:fan"
    update_interval: 60s

  # Similar optimization for Zwift sensors in Homeassistant

switch:
  - platform: restart
    name: ZwiftWind Restart
    entity_category: diagnostic
    disabled_by_default: true

output:
  - platform: ledc
    id: pwm_output
    pin: GPIO19
    inverted: yes
    frequency: 24000

fan:
  - platform: speed
    name: "ZwiftWind Fan"
    id: the_fan
    output: pwm_output
